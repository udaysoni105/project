/** @author : DIVYA KANAK.
* Method name: update
* This method is used for update admin/employee/manager's profile.
* @param {int} id - user_id of admin/employee/manager
*
*
* @param {object} request - which contain below details.
* if admin/employee/manager update profile detail
* @param
state - profile
* @param
{varchar} email - The email of the customer.
* @param
*
@param
{varchar} name - The name of the customer.
{varchar} phone - The phone no of the customer. * if admin/employee/manager update mail address detail @param
state - address
{varchar} Address1 - The Addressl of the customer. {varchar} Address2 - The Address2 of the customer. {varchar} town - The town of the customer.
*
* @param
* @param
* @param
* @param
{varchar} state
* @param
- The state of the customer. {varchar} zip - The zip of the customer.
*
@param {varchar} country - The country of the customer.
* if admin/employee/manager update mail password detail
* @param
state - password
*
@param {varchar} password - The password of the customer.
* @param
{varchar} current password - The current password of the customer.
* @return admin/employee/manager's profile detail, Response code, message.
* @exception throw if any error occur when update admin/employee/manager's profile details in storage. * NOTE: send email when password update, email update
*/


public function update (Request $request, $id) {
Log::info('Admin::AdminProfileController::update::START');
$result = DB::transaction(function () use ($request. Å id) {












        <div class="card flex justify-content-center">task ID:
      <p-autoComplete (completeMethod)="search($event)" [suggestions]="suggestions" type="text" id="project_id" name="project_id" formControlName="project_id"  field="name"></p-autoComplete>
    </div>     
    search(event: AutoCompleteCompleteEvent) {
      // Make an HTTP request to your backend API
      // this.http.get<any[]>('http://127.0.0.1:8000/api/tasks').subscribe(
        this.taskService.getProjects().subscribe(
        (response) => {
          // Set the suggestions with the fetched data
          this.suggestions = response;
        },
        (error) => {
          console.error(error); // Handle error
        }
      );
    }






    public function store(Request $request)
    {
        $result = DB::transaction(function () use ($request) {
            try {
                Log::info("Controller::TasksController::store::START");
                $permission = $request->header('permission');
                $user = auth()->user();

                //$userRole = UserRole::where('user_id', $user['id'])->first();
                $userRole = UserRole::where('user_id', $user->id)->first();


                $rolePermissions = Permission::whereIn('id', function ($query) use ($userRole) {
                    $query->select('permission_id')
                        ->from('role_has_permissions')
                        ->where('role_id', $userRole->role_id);
                })->get();

                $hasPermission = $rolePermissions->contains('name', $permission);

                if (!$hasPermission) {
                    info('Unauthorized');
                }

                $matchedPermission = $rolePermissions->firstWhere('name', $permission);
                info('user has permission: ' . $matchedPermission->name);

                //  Validate the request data
                $validator = Validator::make($request->all(), [
                    'name' => 'required',
                    'description' => 'required',
                    'start_date' => 'required|date',
                    'end_date' => 'required|date|after:start_date',
                    'user_id' => 'required|array',
                ]);
                if ($validator->fails()) {
                    return response()->json(['errors' => $validator->errors()], 400);
                }

                // Create a new task
                $task = Task::create($request->all());

                Log::info("Controller::TasksController::store::END");
                return response()->json(['message' => 'Task created successfully', 'task' => $task]);
            } catch (\Exception $ex) {
                // Log the exception if needed
                Log::error("Error in creating task: " . $ex->getMessage());

                // Return an error response
                return response()->json(['error' => 'An error occurred while creating the task'], 500);
            }
        });
        return $result;
    }








     /** 
     * @author : UDAY SONI
     * Method name: getSortedProjects
     * Soft Delete a project for specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function softDelete($id)
    {
        $result = DB::transaction(function () use ($id) {
            try {
                Log::info("Controller::ProjectsController::softDelete::START");
                $project = Project::find($id);
                $project->delete();
                Log::info("Controller::ProjectsController::softDelete::END");
                return response()->json(['message' => 'Project soft deleted successfully', 'project' => $project]);
            } catch (\Exception $ex) {
                Log::error("Error in ProjectsController::softDelete: " . $ex->getMessage());
                return response()->json(['error' => 'An error occurred while softDelete projects'], 500);
            }
        });
        return $result;
    }

    /** 
     * @author : UDAY SONI
     * Method name: getSortedProjects
     * Fetch all projects, including soft-deleted ones for specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function softDeletedProjects(Request $request)
    {
        $result = DB::transaction(function () use ($request) {
            try {
                Log::info("Controller::ProjectsController::softDeletedProjects::START");
                $projects = Project::withTrashed()->get();
                return response()->json($projects);
                $permission = $request->header('permission');
                $user = auth()->user();

                $userRole = UserRole::where('user_id', $user->id)->first();

                $rolePermissions = Permission::whereIn('id', function ($query) use ($userRole) {
                    $query->select('permission_id')
                        ->from('role_has_permissions')
                        ->where('role_id', $userRole->role_id);
                })->get();

                $hasPermission = $rolePermissions->contains('name', $permission);

                if (!$hasPermission) {
                    info('Unauthorized');
                }

                $matchedPermission = $rolePermissions->firstWhere('name', $permission);
                info('user has permission: ' . $matchedPermission->name);

                Log::info("Controller::ProjectsController::softDeletedProjects::END");

            } catch (\Exception $ex) {

                Log::error("Error in retrieving soft-deleted projects: " . $ex->getMessage());

                return response()->json(['error' => 'An error occurred while retrieving soft-deleted projects'], 500);
            }
        });
        return $result;
    }

    /** 
     * @author : UDAY SONI
     * Method name: getSortedProjects
     * Restore a soft-deleted project for specified resource from storage.
     *
     * @return \Illuminate\Http\Response
     */
    public function restore(Request $request, $id)
    {
        $result = DB::transaction(function () use ($id, $request) {
            try {
                Log::info("Controller::ProjectsController::restore::START");
                $project = Project::withTrashed()->find($id);

                if (!$project) {
                    return response()->json(['message' => 'Project not found or already restored'], 404);
                }
                $permission = $request->header('permission');
                $user = auth()->user();

                $userRole = UserRole::where('user_id', $user->id)->first();

                $rolePermissions = Permission::whereIn('id', function ($query) use ($userRole) {
                    $query->select('permission_id')
                        ->from('role_has_permissions')
                        ->where('role_id', $userRole->role_id);
                })->get();

                $hasPermission = $rolePermissions->contains('name', $permission);

                if (!$hasPermission) {
                    info('Unauthorized');
                }

                $matchedPermission = $rolePermissions->firstWhere('name', $permission);
                info('user has permission: ' . $matchedPermission->name);

                $project->restore();
                Log::info("Controller::ProjectsController::restore::END");
                return response()->json(['message' => 'Project restored successfully'], 200);
            } catch (\Exception $ex) {

                Log::error("Error in restoring project: " . $ex->getMessage());

                return response()->json(['error' => 'An error occurred during project restoration'], 500);
            }
        });
        return $result;
    }
}